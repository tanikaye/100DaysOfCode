const closestCarrot = (grid, startRow, startCol) => {
  let visited = new Set()
  visited.add(startRow + ',' + startCol)
 let queue = [[startRow, startCol, 0]]
   while(queue.length > 0){
     let current = queue.pop()

if(current[0]+1 < grid.length &&
   grid[current[0]+1][current[1]] !== "X" &&
  !(visited.has(parseInt(current[0]+1) + ',' + current[1]))){
  if(grid[current[0]+1][current[1]] === "C") return current[2]+1
  queue.unshift([current[0]+1, current[1], current[2]+1])
  visited.add(parseInt(current[0]+1) + ',' + current[1])
}

if(current[0]-1 >= 0 &&
   grid[current[0]-1][current[1]] !== "X" &&
  !(visited.has(parseInt(current[0]-1) + ',' + current[1]))){
  if(grid[current[0]-1][current[1]] === "C") return current[2]+1
  queue.unshift([current[0]-1, current[1], current[2]+1])
  visited.add(parseInt(current[0]-1) + ',' + current[1])
}

if(current[1]+1 < grid[0].length &&
   grid[current[0]][current[1]+1] !== "X" &&
  !(visited.has(current[0] + ',' + parseInt(current[1]+1)))){
  if(grid[current[0]][current[1]+1] === "C") return current[2]+1
  queue.unshift([current[0], current[1]+1, current[2]+1])
  visited.add(current[0] + ',' + parseInt(current[1]+1))
}

if(current[1]-1 >= 0
   && grid[current[0]][current[1]-1] !== "X" &&
  !(visited.has(current[0] + ',' + parseInt(current[1]-1)))){
  if(grid[current[0]][current[1]-1] === "C") return current[2]+1
  queue.unshift([current[0], current[1]-1, current[2]+1])
  visited.add(current[0] + ',' + parseInt(current[1]-1))
}

  }
  return -1
};

const closestCarrot = (grid, startRow, startCol) => {
  const queue = [ [startRow, startCol, 0] ];
  const visited = new Set([ startRow + ',' + startCol ]);

  while (queue.length > 0) {
    const [ row, col, distance ] = queue.shift();

    if (grid[row][col] === 'C') return distance;

    const deltas = [[1, 0], [-1, 0], [0, 1], [0, -1]];
    for (let delta of deltas)  {
      const [deltaRow, deltaCol] = delta;
      const neighborRow = row + deltaRow;
      const neighborCol = col + deltaCol;
      const neighborPos = neighborRow + ',' + neighborCol;
      const rowInbounds = 0 <= neighborRow && neighborRow < grid.length;
      const colInbounds = 0 <= neighborCol && neighborCol < grid[0].length;
      if (rowInbounds && colInbounds && !visited.has(neighborPos) && grid[neighborRow][neighborCol] !== 'X') {
        visited.add(neighborPos);
        queue.push([ neighborRow, neighborCol, distance + 1 ]);
      }
    }
  }
