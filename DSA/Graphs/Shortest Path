const shortestPath = (edges, nodeA, nodeB) => {
  let graph = buildGraph(edges)
  let shortest = Infinity
  let noPath = true
  let visited = new Set()
let queue = [[nodeA, 0]]
  while(queue.length > 0){
    let current = queue.pop()
    if(current[0] === nodeB){
       noPath = false
       shortest = Math.min(current[1], shortest)
}
      for(var neighbor of graph[current[0]]){
        if(!(visited.has(neighbor))){
          queue.unshift([neighbor, current[1]+1])
          visited.add(neighbor)
          console.log(queue)
        }

        // console.log(queue)
      }
  }
  if(noPath)return -1
  return shortest
}

const buildGraph = (edges) => {
  let graph = {}

  for(let edge of edges){
    const [a,b] = edge
    if(!(a in graph)) graph[a] = []
    if(!(b in graph)) graph[b] = []
    graph[a].push(b)
    graph[b].push(a)
  }
  return graph
}